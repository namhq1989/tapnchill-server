// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: userpb/hub.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserService_GetHabitQuota_FullMethodName = "/userpb.UserService/GetHabitQuota"
	UserService_GetGoalQuota_FullMethodName  = "/userpb.UserService/GetGoalQuota"
	UserService_GetTaskQuota_FullMethodName  = "/userpb.UserService/GetTaskQuota"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetHabitQuota(ctx context.Context, in *GetHabitQuotaRequest, opts ...grpc.CallOption) (*GetHabitQuotaResponse, error)
	GetGoalQuota(ctx context.Context, in *GetGoalQuotaRequest, opts ...grpc.CallOption) (*GetGoalQuotaResponse, error)
	GetTaskQuota(ctx context.Context, in *GetTaskQuotaRequest, opts ...grpc.CallOption) (*GetTaskQuotaResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetHabitQuota(ctx context.Context, in *GetHabitQuotaRequest, opts ...grpc.CallOption) (*GetHabitQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHabitQuotaResponse)
	err := c.cc.Invoke(ctx, UserService_GetHabitQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetGoalQuota(ctx context.Context, in *GetGoalQuotaRequest, opts ...grpc.CallOption) (*GetGoalQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGoalQuotaResponse)
	err := c.cc.Invoke(ctx, UserService_GetGoalQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTaskQuota(ctx context.Context, in *GetTaskQuotaRequest, opts ...grpc.CallOption) (*GetTaskQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskQuotaResponse)
	err := c.cc.Invoke(ctx, UserService_GetTaskQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetHabitQuota(context.Context, *GetHabitQuotaRequest) (*GetHabitQuotaResponse, error)
	GetGoalQuota(context.Context, *GetGoalQuotaRequest) (*GetGoalQuotaResponse, error)
	GetTaskQuota(context.Context, *GetTaskQuotaRequest) (*GetTaskQuotaResponse, error)
}

// UnimplementedUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetHabitQuota(context.Context, *GetHabitQuotaRequest) (*GetHabitQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHabitQuota not implemented")
}
func (UnimplementedUserServiceServer) GetGoalQuota(context.Context, *GetGoalQuotaRequest) (*GetGoalQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoalQuota not implemented")
}
func (UnimplementedUserServiceServer) GetTaskQuota(context.Context, *GetTaskQuotaRequest) (*GetTaskQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskQuota not implemented")
}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetHabitQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHabitQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetHabitQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetHabitQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetHabitQuota(ctx, req.(*GetHabitQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetGoalQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoalQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetGoalQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetGoalQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetGoalQuota(ctx, req.(*GetGoalQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTaskQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTaskQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetTaskQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTaskQuota(ctx, req.(*GetTaskQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userpb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHabitQuota",
			Handler:    _UserService_GetHabitQuota_Handler,
		},
		{
			MethodName: "GetGoalQuota",
			Handler:    _UserService_GetGoalQuota_Handler,
		},
		{
			MethodName: "GetTaskQuota",
			Handler:    _UserService_GetTaskQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userpb/hub.proto",
}
