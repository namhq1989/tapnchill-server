// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/common/domain/caching.go
//
// Generated by this command:
//
//	mockgen -source=pkg/common/domain/caching.go -destination=internal/mock/common/caching.go -package=mockcommon
//

// Package mockcommon is a generated GoMock package.
package mockcommon

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/go-utilities/appcontext"
	domain "github.com/namhq1989/tapnchill-server/pkg/common/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCachingRepository is a mock of CachingRepository interface.
type MockCachingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCachingRepositoryMockRecorder
}

// MockCachingRepositoryMockRecorder is the mock recorder for MockCachingRepository.
type MockCachingRepositoryMockRecorder struct {
	mock *MockCachingRepository
}

// NewMockCachingRepository creates a new mock instance.
func NewMockCachingRepository(ctrl *gomock.Controller) *MockCachingRepository {
	mock := &MockCachingRepository{ctrl: ctrl}
	mock.recorder = &MockCachingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachingRepository) EXPECT() *MockCachingRepositoryMockRecorder {
	return m.recorder
}

// GetCityWeather mocks base method.
func (m *MockCachingRepository) GetCityWeather(ctx *appcontext.AppContext, city string) (*domain.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityWeather", ctx, city)
	ret0, _ := ret[0].(*domain.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityWeather indicates an expected call of GetCityWeather.
func (mr *MockCachingRepositoryMockRecorder) GetCityWeather(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityWeather", reflect.TypeOf((*MockCachingRepository)(nil).GetCityWeather), ctx, city)
}

// GetIpCity mocks base method.
func (m *MockCachingRepository) GetIpCity(ctx *appcontext.AppContext, ip string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpCity", ctx, ip)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpCity indicates an expected call of GetIpCity.
func (mr *MockCachingRepositoryMockRecorder) GetIpCity(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpCity", reflect.TypeOf((*MockCachingRepository)(nil).GetIpCity), ctx, ip)
}

// GetLatestQuote mocks base method.
func (m *MockCachingRepository) GetLatestQuote(ctx *appcontext.AppContext) (*domain.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestQuote", ctx)
	ret0, _ := ret[0].(*domain.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestQuote indicates an expected call of GetLatestQuote.
func (mr *MockCachingRepositoryMockRecorder) GetLatestQuote(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestQuote", reflect.TypeOf((*MockCachingRepository)(nil).GetLatestQuote), ctx)
}

// SetCityWeather mocks base method.
func (m *MockCachingRepository) SetCityWeather(ctx *appcontext.AppContext, city string, weather domain.Weather) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCityWeather", ctx, city, weather)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCityWeather indicates an expected call of SetCityWeather.
func (mr *MockCachingRepositoryMockRecorder) SetCityWeather(ctx, city, weather any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCityWeather", reflect.TypeOf((*MockCachingRepository)(nil).SetCityWeather), ctx, city, weather)
}

// SetIpCity mocks base method.
func (m *MockCachingRepository) SetIpCity(ctx *appcontext.AppContext, ip, city string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIpCity", ctx, ip, city)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIpCity indicates an expected call of SetIpCity.
func (mr *MockCachingRepositoryMockRecorder) SetIpCity(ctx, ip, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIpCity", reflect.TypeOf((*MockCachingRepository)(nil).SetIpCity), ctx, ip, city)
}

// SetLatestQuote mocks base method.
func (m *MockCachingRepository) SetLatestQuote(ctx *appcontext.AppContext, quote domain.Quote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLatestQuote", ctx, quote)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLatestQuote indicates an expected call of SetLatestQuote.
func (mr *MockCachingRepositoryMockRecorder) SetLatestQuote(ctx, quote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLatestQuote", reflect.TypeOf((*MockCachingRepository)(nil).SetLatestQuote), ctx, quote)
}
