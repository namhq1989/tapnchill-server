// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/common/domain/external_api.go
//
// Generated by this command:
//
//	mockgen -source=pkg/common/domain/external_api.go -destination=internal/mock/common/external_api.go -package=mockcommon
//

// Package mockcommon is a generated GoMock package.
package mockcommon

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/go-utilities/appcontext"
	domain "github.com/namhq1989/tapnchill-server/pkg/common/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalApiRepository is a mock of ExternalApiRepository interface.
type MockExternalApiRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExternalApiRepositoryMockRecorder
}

// MockExternalApiRepositoryMockRecorder is the mock recorder for MockExternalApiRepository.
type MockExternalApiRepositoryMockRecorder struct {
	mock *MockExternalApiRepository
}

// NewMockExternalApiRepository creates a new mock instance.
func NewMockExternalApiRepository(ctrl *gomock.Controller) *MockExternalApiRepository {
	mock := &MockExternalApiRepository{ctrl: ctrl}
	mock.recorder = &MockExternalApiRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalApiRepository) EXPECT() *MockExternalApiRepositoryMockRecorder {
	return m.recorder
}

// GetRandomQuote mocks base method.
func (m *MockExternalApiRepository) GetRandomQuote(ctx *appcontext.AppContext) (*domain.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote", ctx)
	ret0, _ := ret[0].(*domain.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockExternalApiRepositoryMockRecorder) GetRandomQuote(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockExternalApiRepository)(nil).GetRandomQuote), ctx)
}
