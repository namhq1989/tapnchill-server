// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/common/domain/feedback.go
//
// Generated by this command:
//
//	mockgen -source=pkg/common/domain/feedback.go -destination=internal/mock/common/feedback.go -package=mockcommon
//

// Package mockcommon is a generated GoMock package.
package mockcommon

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/go-utilities/appcontext"
	domain "github.com/namhq1989/tapnchill-server/pkg/common/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockFeedbackRepository is a mock of FeedbackRepository interface.
type MockFeedbackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackRepositoryMockRecorder
}

// MockFeedbackRepositoryMockRecorder is the mock recorder for MockFeedbackRepository.
type MockFeedbackRepositoryMockRecorder struct {
	mock *MockFeedbackRepository
}

// NewMockFeedbackRepository creates a new mock instance.
func NewMockFeedbackRepository(ctrl *gomock.Controller) *MockFeedbackRepository {
	mock := &MockFeedbackRepository{ctrl: ctrl}
	mock.recorder = &MockFeedbackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackRepository) EXPECT() *MockFeedbackRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFeedbackRepository) Create(ctx *appcontext.AppContext, feedback domain.Feedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, feedback)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFeedbackRepositoryMockRecorder) Create(ctx, feedback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFeedbackRepository)(nil).Create), ctx, feedback)
}
