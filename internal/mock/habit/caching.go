// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/habit/domain/caching.go
//
// Generated by this command:
//
//	mockgen -source=pkg/habit/domain/caching.go -destination=internal/mock/habit/caching.go -package=mockhabit
//

// Package mockhabit is a generated GoMock package.
package mockhabit

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/go-utilities/appcontext"
	domain "github.com/namhq1989/tapnchill-server/pkg/habit/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCachingRepository is a mock of CachingRepository interface.
type MockCachingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCachingRepositoryMockRecorder
}

// MockCachingRepositoryMockRecorder is the mock recorder for MockCachingRepository.
type MockCachingRepositoryMockRecorder struct {
	mock *MockCachingRepository
}

// NewMockCachingRepository creates a new mock instance.
func NewMockCachingRepository(ctrl *gomock.Controller) *MockCachingRepository {
	mock := &MockCachingRepository{ctrl: ctrl}
	mock.recorder = &MockCachingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachingRepository) EXPECT() *MockCachingRepositoryMockRecorder {
	return m.recorder
}

// DeleteUserHabits mocks base method.
func (m *MockCachingRepository) DeleteUserHabits(ctx *appcontext.AppContext, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserHabits", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserHabits indicates an expected call of DeleteUserHabits.
func (mr *MockCachingRepositoryMockRecorder) DeleteUserHabits(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserHabits", reflect.TypeOf((*MockCachingRepository)(nil).DeleteUserHabits), ctx, userID)
}

// DeleteUserStats mocks base method.
func (m *MockCachingRepository) DeleteUserStats(ctx *appcontext.AppContext, userID, date string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserStats", ctx, userID, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserStats indicates an expected call of DeleteUserStats.
func (mr *MockCachingRepositoryMockRecorder) DeleteUserStats(ctx, userID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserStats", reflect.TypeOf((*MockCachingRepository)(nil).DeleteUserStats), ctx, userID, date)
}

// GetUserHabits mocks base method.
func (m *MockCachingRepository) GetUserHabits(ctx *appcontext.AppContext, userID string) ([]domain.Habit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHabits", ctx, userID)
	ret0, _ := ret[0].([]domain.Habit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHabits indicates an expected call of GetUserHabits.
func (mr *MockCachingRepositoryMockRecorder) GetUserHabits(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHabits", reflect.TypeOf((*MockCachingRepository)(nil).GetUserHabits), ctx, userID)
}

// GetUserStats mocks base method.
func (m *MockCachingRepository) GetUserStats(ctx *appcontext.AppContext, userID, date string) ([]domain.HabitDailyStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStats", ctx, userID, date)
	ret0, _ := ret[0].([]domain.HabitDailyStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStats indicates an expected call of GetUserStats.
func (mr *MockCachingRepositoryMockRecorder) GetUserStats(ctx, userID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStats", reflect.TypeOf((*MockCachingRepository)(nil).GetUserStats), ctx, userID, date)
}

// SetUserHabits mocks base method.
func (m *MockCachingRepository) SetUserHabits(ctx *appcontext.AppContext, userID string, habits []domain.Habit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserHabits", ctx, userID, habits)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserHabits indicates an expected call of SetUserHabits.
func (mr *MockCachingRepositoryMockRecorder) SetUserHabits(ctx, userID, habits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserHabits", reflect.TypeOf((*MockCachingRepository)(nil).SetUserHabits), ctx, userID, habits)
}

// SetUserStats mocks base method.
func (m *MockCachingRepository) SetUserStats(ctx *appcontext.AppContext, userID, date string, stats []domain.HabitDailyStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserStats", ctx, userID, date, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserStats indicates an expected call of SetUserStats.
func (mr *MockCachingRepositoryMockRecorder) SetUserStats(ctx, userID, date, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserStats", reflect.TypeOf((*MockCachingRepository)(nil).SetUserStats), ctx, userID, date, stats)
}
