// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/habit/domain/habit_completion.go
//
// Generated by this command:
//
//	mockgen -source=pkg/habit/domain/habit_completion.go -destination=internal/mock/habit/habit_completion.go -package=mockhabit
//

// Package mockhabit is a generated GoMock package.
package mockhabit

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/go-utilities/appcontext"
	domain "github.com/namhq1989/tapnchill-server/pkg/habit/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockHabitCompletionRepository is a mock of HabitCompletionRepository interface.
type MockHabitCompletionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHabitCompletionRepositoryMockRecorder
}

// MockHabitCompletionRepositoryMockRecorder is the mock recorder for MockHabitCompletionRepository.
type MockHabitCompletionRepositoryMockRecorder struct {
	mock *MockHabitCompletionRepository
}

// NewMockHabitCompletionRepository creates a new mock instance.
func NewMockHabitCompletionRepository(ctrl *gomock.Controller) *MockHabitCompletionRepository {
	mock := &MockHabitCompletionRepository{ctrl: ctrl}
	mock.recorder = &MockHabitCompletionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabitCompletionRepository) EXPECT() *MockHabitCompletionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHabitCompletionRepository) Create(ctx *appcontext.AppContext, completion domain.HabitCompletion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, completion)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHabitCompletionRepositoryMockRecorder) Create(ctx, completion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHabitCompletionRepository)(nil).Create), ctx, completion)
}
