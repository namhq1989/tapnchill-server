// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/habit/domain/habit_daily_stats.go
//
// Generated by this command:
//
//	mockgen -source=pkg/habit/domain/habit_daily_stats.go -destination=internal/mock/habit/habit_daily_stats.go -package=mockhabit
//

// Package mockhabit is a generated GoMock package.
package mockhabit

import (
	reflect "reflect"
	time "time"

	appcontext "github.com/namhq1989/go-utilities/appcontext"
	domain "github.com/namhq1989/tapnchill-server/pkg/habit/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockHabitDailyStatsRepository is a mock of HabitDailyStatsRepository interface.
type MockHabitDailyStatsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHabitDailyStatsRepositoryMockRecorder
}

// MockHabitDailyStatsRepositoryMockRecorder is the mock recorder for MockHabitDailyStatsRepository.
type MockHabitDailyStatsRepositoryMockRecorder struct {
	mock *MockHabitDailyStatsRepository
}

// NewMockHabitDailyStatsRepository creates a new mock instance.
func NewMockHabitDailyStatsRepository(ctrl *gomock.Controller) *MockHabitDailyStatsRepository {
	mock := &MockHabitDailyStatsRepository{ctrl: ctrl}
	mock.recorder = &MockHabitDailyStatsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabitDailyStatsRepository) EXPECT() *MockHabitDailyStatsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHabitDailyStatsRepository) Create(ctx *appcontext.AppContext, stats domain.HabitDailyStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHabitDailyStatsRepositoryMockRecorder) Create(ctx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHabitDailyStatsRepository)(nil).Create), ctx, stats)
}

// FindByDate mocks base method.
func (m *MockHabitDailyStatsRepository) FindByDate(ctx *appcontext.AppContext, habitID string, date time.Time) (*domain.HabitDailyStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDate", ctx, habitID, date)
	ret0, _ := ret[0].(*domain.HabitDailyStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDate indicates an expected call of FindByDate.
func (mr *MockHabitDailyStatsRepositoryMockRecorder) FindByDate(ctx, habitID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDate", reflect.TypeOf((*MockHabitDailyStatsRepository)(nil).FindByDate), ctx, habitID, date)
}

// FindByFilter mocks base method.
func (m *MockHabitDailyStatsRepository) FindByFilter(ctx *appcontext.AppContext, filter domain.HabitDailyStatsFilter) ([]domain.HabitDailyStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilter", ctx, filter)
	ret0, _ := ret[0].([]domain.HabitDailyStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilter indicates an expected call of FindByFilter.
func (mr *MockHabitDailyStatsRepositoryMockRecorder) FindByFilter(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilter", reflect.TypeOf((*MockHabitDailyStatsRepository)(nil).FindByFilter), ctx, filter)
}

// FindByID mocks base method.
func (m *MockHabitDailyStatsRepository) FindByID(ctx *appcontext.AppContext, statsID string) (*domain.HabitDailyStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, statsID)
	ret0, _ := ret[0].(*domain.HabitDailyStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockHabitDailyStatsRepositoryMockRecorder) FindByID(ctx, statsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockHabitDailyStatsRepository)(nil).FindByID), ctx, statsID)
}

// Update mocks base method.
func (m *MockHabitDailyStatsRepository) Update(ctx *appcontext.AppContext, stats domain.HabitDailyStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockHabitDailyStatsRepositoryMockRecorder) Update(ctx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHabitDailyStatsRepository)(nil).Update), ctx, stats)
}
