// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/note/domain/note.go
//
// Generated by this command:
//
//	mockgen -source=pkg/note/domain/note.go -destination=internal/mock/note/note.go -package=mocknote
//

// Package mocknote is a generated GoMock package.
package mocknote

import (
	reflect "reflect"
	time "time"

	appcontext "github.com/namhq1989/go-utilities/appcontext"
	domain "github.com/namhq1989/tapnchill-server/pkg/note/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockNoteRepository is a mock of NoteRepository interface.
type MockNoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepositoryMockRecorder
}

// MockNoteRepositoryMockRecorder is the mock recorder for MockNoteRepository.
type MockNoteRepositoryMockRecorder struct {
	mock *MockNoteRepository
}

// NewMockNoteRepository creates a new mock instance.
func NewMockNoteRepository(ctrl *gomock.Controller) *MockNoteRepository {
	mock := &MockNoteRepository{ctrl: ctrl}
	mock.recorder = &MockNoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteRepository) EXPECT() *MockNoteRepositoryMockRecorder {
	return m.recorder
}

// CountByUserID mocks base method.
func (m *MockNoteRepository) CountByUserID(ctx *appcontext.AppContext, userID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByUserID", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByUserID indicates an expected call of CountByUserID.
func (mr *MockNoteRepositoryMockRecorder) CountByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByUserID", reflect.TypeOf((*MockNoteRepository)(nil).CountByUserID), ctx, userID)
}

// Create mocks base method.
func (m *MockNoteRepository) Create(ctx *appcontext.AppContext, note domain.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNoteRepositoryMockRecorder) Create(ctx, note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNoteRepository)(nil).Create), ctx, note)
}

// Delete mocks base method.
func (m *MockNoteRepository) Delete(ctx *appcontext.AppContext, noteID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, noteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNoteRepositoryMockRecorder) Delete(ctx, noteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNoteRepository)(nil).Delete), ctx, noteID)
}

// FindByID mocks base method.
func (m *MockNoteRepository) FindByID(ctx *appcontext.AppContext, noteID string) (*domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, noteID)
	ret0, _ := ret[0].(*domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockNoteRepositoryMockRecorder) FindByID(ctx, noteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockNoteRepository)(nil).FindByID), ctx, noteID)
}

// Sync mocks base method.
func (m *MockNoteRepository) Sync(ctx *appcontext.AppContext, userID string, updatedAt time.Time, numOfNotes int64) ([]domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, userID, updatedAt, numOfNotes)
	ret0, _ := ret[0].([]domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockNoteRepositoryMockRecorder) Sync(ctx, userID, updatedAt, numOfNotes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockNoteRepository)(nil).Sync), ctx, userID, updatedAt, numOfNotes)
}

// Update mocks base method.
func (m *MockNoteRepository) Update(ctx *appcontext.AppContext, note domain.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNoteRepositoryMockRecorder) Update(ctx, note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNoteRepository)(nil).Update), ctx, note)
}
