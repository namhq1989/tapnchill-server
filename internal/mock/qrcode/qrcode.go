// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/qrcode/domain/qrcode.go
//
// Generated by this command:
//
//	mockgen -source=pkg/qrcode/domain/qrcode.go -destination=internal/mock/qrcode/qrcode.go -package=mockqrcode
//

// Package mockqrcode is a generated GoMock package.
package mockqrcode

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/go-utilities/appcontext"
	domain "github.com/namhq1989/tapnchill-server/pkg/qrcode/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockQRCodeRepository is a mock of QRCodeRepository interface.
type MockQRCodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQRCodeRepositoryMockRecorder
}

// MockQRCodeRepositoryMockRecorder is the mock recorder for MockQRCodeRepository.
type MockQRCodeRepositoryMockRecorder struct {
	mock *MockQRCodeRepository
}

// NewMockQRCodeRepository creates a new mock instance.
func NewMockQRCodeRepository(ctrl *gomock.Controller) *MockQRCodeRepository {
	mock := &MockQRCodeRepository{ctrl: ctrl}
	mock.recorder = &MockQRCodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQRCodeRepository) EXPECT() *MockQRCodeRepositoryMockRecorder {
	return m.recorder
}

// CountByUserID mocks base method.
func (m *MockQRCodeRepository) CountByUserID(ctx *appcontext.AppContext, userID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByUserID", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByUserID indicates an expected call of CountByUserID.
func (mr *MockQRCodeRepositoryMockRecorder) CountByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByUserID", reflect.TypeOf((*MockQRCodeRepository)(nil).CountByUserID), ctx, userID)
}

// Create mocks base method.
func (m *MockQRCodeRepository) Create(ctx *appcontext.AppContext, qrCode domain.QRCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, qrCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockQRCodeRepositoryMockRecorder) Create(ctx, qrCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQRCodeRepository)(nil).Create), ctx, qrCode)
}

// Delete mocks base method.
func (m *MockQRCodeRepository) Delete(ctx *appcontext.AppContext, qrCodeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, qrCodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQRCodeRepositoryMockRecorder) Delete(ctx, qrCodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQRCodeRepository)(nil).Delete), ctx, qrCodeID)
}

// FindByFilter mocks base method.
func (m *MockQRCodeRepository) FindByFilter(ctx *appcontext.AppContext, filter domain.QRCodeFilter) ([]domain.QRCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilter", ctx, filter)
	ret0, _ := ret[0].([]domain.QRCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilter indicates an expected call of FindByFilter.
func (mr *MockQRCodeRepositoryMockRecorder) FindByFilter(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilter", reflect.TypeOf((*MockQRCodeRepository)(nil).FindByFilter), ctx, filter)
}

// FindByID mocks base method.
func (m *MockQRCodeRepository) FindByID(ctx *appcontext.AppContext, qrCodeID string) (*domain.QRCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, qrCodeID)
	ret0, _ := ret[0].(*domain.QRCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockQRCodeRepositoryMockRecorder) FindByID(ctx, qrCodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockQRCodeRepository)(nil).FindByID), ctx, qrCodeID)
}

// Update mocks base method.
func (m *MockQRCodeRepository) Update(ctx *appcontext.AppContext, qrCode domain.QRCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, qrCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockQRCodeRepositoryMockRecorder) Update(ctx, qrCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockQRCodeRepository)(nil).Update), ctx, qrCode)
}
