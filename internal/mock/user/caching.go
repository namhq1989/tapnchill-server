// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/user/domain/caching.go
//
// Generated by this command:
//
//	mockgen -source=pkg/user/domain/caching.go -destination=internal/mock/user/caching.go -package=mockuser
//

// Package mockuser is a generated GoMock package.
package mockuser

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/go-utilities/appcontext"
	domain "github.com/namhq1989/tapnchill-server/pkg/user/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCachingRepository is a mock of CachingRepository interface.
type MockCachingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCachingRepositoryMockRecorder
}

// MockCachingRepositoryMockRecorder is the mock recorder for MockCachingRepository.
type MockCachingRepositoryMockRecorder struct {
	mock *MockCachingRepository
}

// NewMockCachingRepository creates a new mock instance.
func NewMockCachingRepository(ctrl *gomock.Controller) *MockCachingRepository {
	mock := &MockCachingRepository{ctrl: ctrl}
	mock.recorder = &MockCachingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachingRepository) EXPECT() *MockCachingRepositoryMockRecorder {
	return m.recorder
}

// DeleteUserByID mocks base method.
func (m *MockCachingRepository) DeleteUserByID(ctx *appcontext.AppContext, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockCachingRepositoryMockRecorder) DeleteUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockCachingRepository)(nil).DeleteUserByID), ctx, userID)
}

// GetLemonsqueezyCustomerPortalURL mocks base method.
func (m *MockCachingRepository) GetLemonsqueezyCustomerPortalURL(ctx *appcontext.AppContext, customerID string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLemonsqueezyCustomerPortalURL", ctx, customerID)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLemonsqueezyCustomerPortalURL indicates an expected call of GetLemonsqueezyCustomerPortalURL.
func (mr *MockCachingRepositoryMockRecorder) GetLemonsqueezyCustomerPortalURL(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLemonsqueezyCustomerPortalURL", reflect.TypeOf((*MockCachingRepository)(nil).GetLemonsqueezyCustomerPortalURL), ctx, customerID)
}

// GetUserByID mocks base method.
func (m *MockCachingRepository) GetUserByID(ctx *appcontext.AppContext, userID string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockCachingRepositoryMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockCachingRepository)(nil).GetUserByID), ctx, userID)
}

// SetLemonsqueezyCustomerPortalURL mocks base method.
func (m *MockCachingRepository) SetLemonsqueezyCustomerPortalURL(ctx *appcontext.AppContext, customerID, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLemonsqueezyCustomerPortalURL", ctx, customerID, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLemonsqueezyCustomerPortalURL indicates an expected call of SetLemonsqueezyCustomerPortalURL.
func (mr *MockCachingRepositoryMockRecorder) SetLemonsqueezyCustomerPortalURL(ctx, customerID, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLemonsqueezyCustomerPortalURL", reflect.TypeOf((*MockCachingRepository)(nil).SetLemonsqueezyCustomerPortalURL), ctx, customerID, url)
}

// SetUserByID mocks base method.
func (m *MockCachingRepository) SetUserByID(ctx *appcontext.AppContext, userID string, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserByID", ctx, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserByID indicates an expected call of SetUserByID.
func (mr *MockCachingRepositoryMockRecorder) SetUserByID(ctx, userID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserByID", reflect.TypeOf((*MockCachingRepository)(nil).SetUserByID), ctx, userID, user)
}
