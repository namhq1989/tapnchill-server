// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/user/domain/external_api.go
//
// Generated by this command:
//
//	mockgen -source=pkg/user/domain/external_api.go -destination=internal/mock/user/external_api.go -package=mockuser
//

// Package mockuser is a generated GoMock package.
package mockuser

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/go-utilities/appcontext"
	domain "github.com/namhq1989/tapnchill-server/pkg/user/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalAPIRepository is a mock of ExternalAPIRepository interface.
type MockExternalAPIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExternalAPIRepositoryMockRecorder
}

// MockExternalAPIRepositoryMockRecorder is the mock recorder for MockExternalAPIRepository.
type MockExternalAPIRepositoryMockRecorder struct {
	mock *MockExternalAPIRepository
}

// NewMockExternalAPIRepository creates a new mock instance.
func NewMockExternalAPIRepository(ctrl *gomock.Controller) *MockExternalAPIRepository {
	mock := &MockExternalAPIRepository{ctrl: ctrl}
	mock.recorder = &MockExternalAPIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalAPIRepository) EXPECT() *MockExternalAPIRepositoryMockRecorder {
	return m.recorder
}

// GenerateLemonsqueezyCheckoutURL mocks base method.
func (m *MockExternalAPIRepository) GenerateLemonsqueezyCheckoutURL(ctx *appcontext.AppContext, userID, subscriptionID string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateLemonsqueezyCheckoutURL", ctx, userID, subscriptionID)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateLemonsqueezyCheckoutURL indicates an expected call of GenerateLemonsqueezyCheckoutURL.
func (mr *MockExternalAPIRepositoryMockRecorder) GenerateLemonsqueezyCheckoutURL(ctx, userID, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateLemonsqueezyCheckoutURL", reflect.TypeOf((*MockExternalAPIRepository)(nil).GenerateLemonsqueezyCheckoutURL), ctx, userID, subscriptionID)
}

// GetLemonsqueezyCustomerPortalURL mocks base method.
func (m *MockExternalAPIRepository) GetLemonsqueezyCustomerPortalURL(ctx *appcontext.AppContext, customerID string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLemonsqueezyCustomerPortalURL", ctx, customerID)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLemonsqueezyCustomerPortalURL indicates an expected call of GetLemonsqueezyCustomerPortalURL.
func (mr *MockExternalAPIRepositoryMockRecorder) GetLemonsqueezyCustomerPortalURL(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLemonsqueezyCustomerPortalURL", reflect.TypeOf((*MockExternalAPIRepository)(nil).GetLemonsqueezyCustomerPortalURL), ctx, customerID)
}

// GetLemonsqueezyInvoiceData mocks base method.
func (m *MockExternalAPIRepository) GetLemonsqueezyInvoiceData(ctx *appcontext.AppContext, invoiceID string) (*domain.GetLemonsqueezyInvoiceDataResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLemonsqueezyInvoiceData", ctx, invoiceID)
	ret0, _ := ret[0].(*domain.GetLemonsqueezyInvoiceDataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLemonsqueezyInvoiceData indicates an expected call of GetLemonsqueezyInvoiceData.
func (mr *MockExternalAPIRepositoryMockRecorder) GetLemonsqueezyInvoiceData(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLemonsqueezyInvoiceData", reflect.TypeOf((*MockExternalAPIRepository)(nil).GetLemonsqueezyInvoiceData), ctx, invoiceID)
}
