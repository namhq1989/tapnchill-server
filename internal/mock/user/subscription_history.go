// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/user/domain/subscription_history.go
//
// Generated by this command:
//
//	mockgen -source=pkg/user/domain/subscription_history.go -destination=internal/mock/user/subscription_history.go -package=mockuser
//

// Package mockuser is a generated GoMock package.
package mockuser

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/go-utilities/appcontext"
	domain "github.com/namhq1989/tapnchill-server/pkg/user/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionHistoryRepository is a mock of SubscriptionHistoryRepository interface.
type MockSubscriptionHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionHistoryRepositoryMockRecorder
}

// MockSubscriptionHistoryRepositoryMockRecorder is the mock recorder for MockSubscriptionHistoryRepository.
type MockSubscriptionHistoryRepositoryMockRecorder struct {
	mock *MockSubscriptionHistoryRepository
}

// NewMockSubscriptionHistoryRepository creates a new mock instance.
func NewMockSubscriptionHistoryRepository(ctrl *gomock.Controller) *MockSubscriptionHistoryRepository {
	mock := &MockSubscriptionHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionHistoryRepository) EXPECT() *MockSubscriptionHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubscriptionHistoryRepository) Create(ctx *appcontext.AppContext, history domain.SubscriptionHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionHistoryRepositoryMockRecorder) Create(ctx, history any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscriptionHistoryRepository)(nil).Create), ctx, history)
}

// FindBySourceID mocks base method.
func (m *MockSubscriptionHistoryRepository) FindBySourceID(ctx *appcontext.AppContext, sourceID string) (*domain.SubscriptionHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySourceID", ctx, sourceID)
	ret0, _ := ret[0].(*domain.SubscriptionHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySourceID indicates an expected call of FindBySourceID.
func (mr *MockSubscriptionHistoryRepositoryMockRecorder) FindBySourceID(ctx, sourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySourceID", reflect.TypeOf((*MockSubscriptionHistoryRepository)(nil).FindBySourceID), ctx, sourceID)
}

// Update mocks base method.
func (m *MockSubscriptionHistoryRepository) Update(ctx *appcontext.AppContext, history domain.SubscriptionHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSubscriptionHistoryRepositoryMockRecorder) Update(ctx, history any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubscriptionHistoryRepository)(nil).Update), ctx, history)
}
